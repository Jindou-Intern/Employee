@implements IDisposable
@if (allState.ShowVacationType)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Vacation Types</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>
                            Add Vacation Type
                        </button>
                    </div>

                    <div class="card-header" style="max-height:500px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Vacation Type</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @if (VacationTypes is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in VacationTypes)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="()=>EditButtonClicked(item)"></i>

                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="()=> DeleteButtonClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No Vacation Type added yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<VacationTypeDialog @ref="vacationTypeDialog"
                    HandleSaveOperationEvent="HandleSaveOperationEvent"
                    VacationType="VacationType" />

@code {
    public string Title { get; set; } = "Add";

    VacationTypeDialog? vacationTypeDialog;
    VacationType VacationType = new VacationType();

    public List<VacationType> VacationTypes { get; set; } = new List<VacationType>();

    protected override async Task OnInitializedAsync()
    {
        await GetVacationTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetVacationTypes()
    {
        VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);
    }

    async Task AddButtonClicked()
    {
        if (VacationTypes == null || !VacationTypes.Any())
        {
            // Ensure vacation types are loaded before opening the dialog
            await GetVacationTypes();
        }

        VacationType = new();
        vacationTypeDialog?.ChangeTitle("Add");
        OpenDialog();
    }

    void OpenDialog()
    {
        vacationTypeDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(VacationType vacationType)
    {
        bool successCheck = false;
        if (vacationType.Id <= 0)
        {
            var response = await vacationTypeService.Insert(vacationType, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var result = await vacationTypeService.Update(vacationType, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            VacationType = new VacationType();
            await GetVacationTypes();
            vacationTypeDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditButtonClicked(VacationType vacationType)
    {
        VacationType = vacationType;
        vacationTypeDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    //Delete
    private async Task DeleteButtonClicked(VacationType item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await vacationTypeService.DeleteById(item.Id, Constants.VacationTypeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);

        if (result)
            await GetVacationTypes();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
