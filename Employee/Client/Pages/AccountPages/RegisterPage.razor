@page "/identity/account/register"
@layout AuthenticationLayout

<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />

                <div class="card bg-dark d-flex justify-content-center" style="opacity:0.5; margin-top:50%; border-radius: 10px; color:white; font-weight:bold;">
                    <div class="card-header text-center fs-5">Register an account</div>

                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius:20px" src="../images/companylogos/jindou.png" height="50" width="50" />
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Fullname</label>
                            <InputText @bind-Value="User.Fullname" class="form-control"></InputText>
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control" autocomplete="email"></InputText>
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="User.Password" type="password" class="form-control" autocomplete="new-password"></InputText>
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText @bind-Value="User.ConfimPassword" type="password" class="form-control" autocomplete="new-password"></InputText>
                        </div>

                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" type="submit">Register</button>
                            }
                        </div>
                    </div>

                    <div class="card-footer">
                        <span class="text-center">
                            Have an account already? |
                            <NavLink class="btn-link" href="/identity/account/login">Sign In</NavLink>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    private Register User = new();

    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            await CheckUserAuthentication();
        }
        else
        {
            Console.WriteLine("AuthenticationState is null");
        }
    }

    private async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Success");
            User = new();
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        await dialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        var authState = await AuthenticationState;
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/home/dashboard", forceLoad: true);
        }
    }
}
