@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Employee List</h5>
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i> Add Employee
                            </button>
                        </div>
                        <div class="card-body p-2">
                            <SfGrid DataSource="@Employees">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @if (context is Employee employee)
                                            {
                                                <div class="image">
                                                    <img src="@employee.Photo" alt="@employee.Name" width="50" />
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil ID"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.TelephoneNumber) HeaderText="Telephone Number"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                    <GridColumn HeaderText="Branch">
                                        <Template>
                                            @if (context is Employee employee)
                                            {
                                                <div>@employee.Branch?.Name</div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn HeaderText="Town">
                                        <Template>
                                            @if (context is Employee employee)
                                            {
                                                <div>@employee.Town?.Name</div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @if (context is Employee employee)
                                            {
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="() => ShowMenuPopUp(employee)"></i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer"></div>
                    </div>
                </div>
            </div>
        </div>

    }
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultCountries"
                         Cities="SelectedCites"
                         Towns="SelectedTowns"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="SelectedDepartments"
                         Branches="SelectedBranches"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleCitySelectedEvent="HandleCitySelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent">
</AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
    ShowDetailsPage="ShowDetailsPage"
    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked"/>

<ContextMenu @ref="contextMenu"
    HandleDeletedClicked="DeleteClicked"
    HandleEditClicked="EditClicked"
    HandleViewClicked="ViewClicked"

    HandleAddHealthClicked="AddHealthClicked"
    HandleAddOvertimeClicked="AddOvertimeClicked"
    HandleAddSanctionClicked="AddSanctionClicked"
    HandleAddVacationClicked="AddVacationClicked">

</ContextMenu>

<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent"/>

<OvertimeDialog @ref="overtimeDialog" ItemModel="Overtime" OvertimeTypes="OvertimeTypes" HandleSaveOperationEvent="SaveOvertimeEvent" />

<SanctionDialog @ref="sanctionDialog" ItemModel="Sanction" SanctionTypes="SanctionTypes" HandleSaveOperationEvent="SaveSanctionEvent" />

<VacationDialog @ref="vacationDialog" ItemModel="Vacation" VacationTypes="VacationTypes" HandleSaveOperationEvent="SaveVacationEvent" />

@code {
 
        AddOrUpdateEmployeePage? addOrUpdateEmployee;
        public List<Employee> Employees { get; set; } = new();
        public Employee Employee { get; set; } = new();

        // Default Countries /Cities /Towns
        public List<Country> DefaultCountries { get; set; } = new();
        public List<City> DefaultCities { get; set; } = new();
        public List<Town> DefaultTowns { get; set; } = new();

        // Default General Departments /Departments /Branches
        public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = new();
        public List<Department> DefaultDepartments { get; set; } = new();
        public List<Branch> DefaultBranches { get; set; } = new();

        // Selected Departments/Branches /Towns/Cities
        public List<City> SelectedCites { get; set; } = new();
        public List<Town> SelectedTowns { get; set; } = new();
        public List<Department> SelectedDepartments { get; set; } = new();
        public List<Branch> SelectedBranches { get; set; } = new();

        protected async override Task OnInitializedAsync()
        {
            allState.Action += StateHasChanged;
            await LoadEmployees();
            await LoadDefaults();
            await GetOvertimeTypes();
            await GetSanctionTypes();
            await GetVacationTypes();
        }

        private async Task LoadDefaults()
        {
            // Get All Countries /Cities /Towns
            DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
            DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
            DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

            // Get All General Departments /Departments /Branches
            DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
            DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
            DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
        }

        // Country Selected Event
        private void HandleCountrySelectedEvent(int countryId) =>
            SelectedCites = DefaultCities.Where(c => c.CountryId == countryId).ToList();

        // City Selected Event
        private void HandleCitySelectedEvent(int cityId) =>
            SelectedTowns = DefaultTowns.Where(t => t.CityId == cityId).ToList();

        // General Department Selected Event
        void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) =>
            SelectedDepartments = DefaultDepartments.Where(gd => gd.GeneralDepartmentId == generalDepartmentId).ToList();

        // Department Selected Event
        void HandleDepartmentSelectedEvent(int departmentId) =>
            SelectedBranches = DefaultBranches.Where(d => d.DepartmentId == departmentId).ToList();

        // Notify parent form when Add or Update Employee form is closed
        private async Task NotifyParentFormCloseClicked()
        {
            ShowMainPage = true;
            ShowAddOrUpdatePage = false;
            await LoadEmployees(); // Reload employees to reflect changes
            SelectedEmployee = new();
        }

        // Load employees
        private async Task LoadEmployees()
        {
            Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
            StateHasChanged(); // Ensure the UI is updated
        }

        // Save Employee Clicked Event
        async Task HandleSaveEmployeeClickedEvent(Employee employee)
        {
            bool successCheck = false;
            {                
                if (employee.Id > 0)
                {
                    var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
                    successCheck = await DisplayMessage(result.Flag, result.Message);
                }
                else
                {
                    var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
                    successCheck = await DisplayMessage(response.Flag, response.Message);
                }

                if (successCheck)
                {
                    addOrUpdateEmployee!.CleanrContent();
                    await LoadEmployees(); // Reload employees to reflect changes
                    StateHasChanged(); // Ensure the UI is updated
                }
            }
            
        }

        public bool ShowMainPage { get; set; } = true;

        public bool ShowAddOrUpdatePage { get; set; } = false;

        void ShowAddOrUpdateEmployeeButtonClicked()
        {
            ShowMainPage = false;
            ShowAddOrUpdatePage = true;
        }

        // Display Message
        private async Task<bool> DisplayMessage(bool flag, string message)
        {
            if (flag)
            {
                await dialogService.AlertAsync(message, "Success Operation");
                return true;
            }
            else
            {
                await dialogService.AlertAsync(message, "Alert!");
                return false;
            }
        }

        // Context Menu
        //Show Menu PopUp
        ContextMenu? contextMenu;
        public Employee SelectedEmployee { get; set; } = new();
        void ShowMenuPopUp(Employee employee)
        {
            SelectedEmployee = employee;
            contextMenu!.OpenContextMenu();
        }

        //Edit Clicked
        void EditClicked()
        {
            // EmployeeGrouping1
            addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
            addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
            addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;
            addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
            addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
            addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
            addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;

            // EmployeeGrouping2
            addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
            addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other;

            // General Department/Department/Branch
            addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
            addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
            addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name;

            // Country/City/Town
            addOrUpdateEmployee!.Country = SelectedEmployee.Town!.City!.Country!.Name;
            addOrUpdateEmployee!.City = SelectedEmployee.Town!.City!.Name;
            addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name;

            // Title
            addOrUpdateEmployee.Title = "Update";
            SelectedEmployee = new();
            contextMenu!.CloseContextMenu();

            // Ensure the update form is shown
            ShowMainPage = false;
            ShowAddOrUpdatePage = true;
        }

        //Delete Clicked
        private async Task DeleteClicked()
        {
            contextMenu!.CloseContextMenu();
            bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {SelectedEmployee.Name} employee?", "Delete Employee");
            if (!confirm) return;

            var response = await employeeService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
            var result = await DisplayMessage(response.Flag, response.Message);
            if (result)
            {
                SelectedEmployee = new();
                await LoadEmployees(); // Reload employees to reflect changes
            }
        }

        //View Clicked
        public bool ShowDetailsPage { get; set; } = false;
        private void ViewClicked()
        {
            Employee = SelectedEmployee;
            contextMenu!.CloseContextMenu();
            ShowDetailsPage = true;
            ShowMainPage = false;
            SelectedEmployee = new();
        }

        private async Task GetOvertimeTypes()=>
        OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

        private async Task GetSanctionTypes() =>
        SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

        private async Task GetVacationTypes() =>
        VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

        //Add Health Clicked
        DoctorDialog? doctorDialog;
        Doctor Doctor = new();
        private void AddHealthClicked()
        {
            Doctor.EmployeeId = SelectedEmployee.Id;
            contextMenu!.CloseContextMenu();
            doctorDialog!.OpenDialog();
        }

        //Save Health Handleer
        async Task SaveHealthEvent(Doctor item)
        {
            item.EmployeeId = SelectedEmployee.Id;
            var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
            var response = await DisplayMessage(flag, message);
            if (response)
            {
                SelectedEmployee = new();
                Doctor = new();
                doctorDialog!.CloseDialog();
            }
        }

        //Add Overtime Clicked
        OvertimeDialog? overtimeDialog;
        Overtime Overtime = new();
        List<OvertimeType> OvertimeTypes = new();
        private void AddOvertimeClicked()
        {
            Overtime.EmployeeId = SelectedEmployee.Id;
            contextMenu!.CloseContextMenu();
            overtimeDialog!.OpenDialog();
        }

        //Save Overtime Handleer
        async Task SaveOvertimeEvent(Overtime item)
        {
            item.EmployeeId = SelectedEmployee.Id;
            var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
            var response = await DisplayMessage(flag, message);
            if (response)
            {
                SelectedEmployee = new();
                Overtime = new();
                overtimeDialog!.CloseDialog();
            }
        }

        //Add Sanction Clicked
        SanctionDialog? sanctionDialog;
        Sanction Sanction = new();
        List<SanctionType> SanctionTypes = new();
        private void AddSanctionClicked()
        {
            Sanction.EmployeeId = SelectedEmployee.Id;
            contextMenu!.CloseContextMenu();
            sanctionDialog!.OpenDialog();
        }

        //Save Sanction Handleer
        async Task SaveSanctionEvent(Sanction item)
        {
            item.EmployeeId = SelectedEmployee.Id;
            var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
            var response = await DisplayMessage(flag, message);
            if (response)
            {
                SelectedEmployee = new();
                Sanction = new();
                sanctionDialog!.CloseDialog();
            }
        }

        //Add Vacation Clicked
        VacationDialog? vacationDialog;
        Vacation Vacation = new();
        List<VacationType> VacationTypes = new();
        private void AddVacationClicked()
        {
            Vacation.EmployeeId = SelectedEmployee.Id;
            contextMenu!.CloseContextMenu();
            vacationDialog!.OpenDialog();
        }

        //Save Vacation Handleer
        async Task SaveVacationEvent(Vacation item)
        {
            item.EmployeeId = SelectedEmployee.Id;
            var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
            var response = await DisplayMessage(flag, message);
            if (response)
            {
                SelectedEmployee = new();
                Vacation = new();
                vacationDialog!.CloseDialog();
            }
        }

        //Details employee Close btn clicked
        void HandleDetailsPageCloseBtnClicked()
        {
            ShowDetailsPage = false;
            ShowMainPage = true;
        }

        public void Dispose()
        {
            allState.Action -= StateHasChanged;
        }
 }
