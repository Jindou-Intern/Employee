@implements IDisposable
@if(allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>

                    <div class="card-header" style="max-height:500px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(ManageUsers is not null)
                                    {
                                        int count =1;
                                        foreach(var item in ManageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.UserId</td>
                                                <td>@item.Name</td>
                                                <td>@item.Email</td>
                                                <td>@item.Role</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="() => EditClicked(item)"></i>

                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<UserDialog @ref="userDialog"
    MangeUser="MangeUser"
    SystemRoles="SystemRoles"
    HandleSaveOperationEvent="HandleSaveOperationEvent"/>

@code {
    UserDialog? userDialog;
    MangeUser MangeUser = new();
    public List<MangeUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();
    }

    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    void OpenDialog()
    {
        userDialog?.OpenDialog();    
    }

    private async Task HandleSaveOperationEvent(MangeUser mangeUser)
    {
        var result = await accountService.UpdateUser(mangeUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if(successCheck)
        {
            MangeUser = new();
            await GetUsers();
        }
    }

    //Edit
    private void EditClicked(MangeUser user)
    {
        MangeUser = user;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(MangeUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete{user.Name}?","Confirm Delete");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);

        if(result)
            await GetUsers();
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
