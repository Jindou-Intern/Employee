@implements IDisposable
@if (allState.ShowBranch)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Branches</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add Branch
                        </button>
                    </div>
                    <div class="card-body" style="max-height:500px; overflow-x:hidden;overflow-y:scroll;">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Department</th>
                                    <th scope="col">Branch</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Branches is not null && Branches.Any())
                                {
                                    int count = 1;
                                    foreach (var item in Branches)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Department!.Name</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle"
                                                   @onclick="() => EditButtonClicked(item)"></i>

                                                <i class="bi bi-trash text-danger" id="cursorStyle"
                                                   @onclick="() => DeleteButtonClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5">
                                            <div class="alert alert-info text-center">
                                                No Branch added yet!
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<BranchDialog @ref="branchDialog"
              HandleSaveOperationEvent="HandleSaveOperationEvent"
              Branch="Branch"
              Departments="Departments" />

@code {
    public string Title { get; set; } = "Add";

    BranchDialog? branchDialog;
    Branch Branch = new Branch();

    public List<Branch> Branches { get; set; } = new List<Branch>();
    public List<Department> Departments { get; set; } = new List<Department>();

    protected override async Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetBranches()
    {
        Branches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }

    async Task AddButtonClicked()
    {
        if (Departments == null || !Departments.Any())
        {
            // Ensure departments are loaded before opening the dialog
            await GetDepartments();
        }

        Branch = new();
        branchDialog?.ChangeTitle("Add");
        OpenDialog();
    }

    void OpenDialog()
    {
        branchDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Branch branch)
    {
        bool successCheck = false;
        if (branch.Id <= 0)
        {
            var response = await branchService.Insert(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var result = await branchService.Update(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            Branch = new Branch();
            await GetBranches();
            branchDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditButtonClicked(Branch branch)
    {
        Branch = branch;
        branchDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    //Delete
    private async Task DeleteButtonClicked(Branch branch)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {branch.Name}?", " Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(branch.Id, Constants.BranchBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);

        if (result)
            await GetBranches();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
